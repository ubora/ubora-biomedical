@using Ubora.Domain.Resources

@inject Ubora.Domain.Infrastructure.Queries.IQueryProcessor QueryProcessor

@{
    ViewData["Title"] = "Resources";
}

@if (await AuthorizationService.IsAuthorizedAsync(User, Policies.CanManageResourcePages))
{
    @section Right {
        <div class="mb-3">
            <a asp-action="@nameof(ResourcePageCreationController.Add)" asp-controller="ResourcePageCreation" class="my-2 btn btn-block btn-outline-primary">
                <i class="material-icons">add</i>
                <span>Create new resource page</span>
            </a>
            <a asp-action="@nameof(ResourceCategoriesController.Create)" asp-controller="ResourceCategories" class="my-2 btn btn-block btn-outline-primary">
                <i class="material-icons">add</i>
                <span>Create new resource category</span>
            </a>
        </div>
    }
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item active" aria-current="page"> @ViewData["Title"]</li>
    </ol>
</nav>

<h1>@ViewData["Title"]</h1>

@{
    var resources = QueryProcessor.Find(new MatchAll<ResourcePage>(), new ResourceIndexViewModel.Mapper());
}

<ul>
    @foreach (var resourcePage in resources)
    {
        <li>
            <a asp-action="@nameof(ResourcePagesController.Read)" asp-controller="@nameof(ResourcePagesController).RemoveSuffix()" asp-route-resourcePageId="@resourcePage.ResourceId">@resourcePage.Title</a>
        </li>
    }
</ul>