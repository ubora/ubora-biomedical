@using Ubora.Web._Features.Projects._Shared
@model Ubora.Web._Features.Projects.Repository.ProjectRepositoryViewModel

@{
    ViewData["Title"] = "Repository";
    ViewData["MenuOption"] = ProjectMenuOption.Repository;
}

<div class="container-fluid my-4">
    <div class="row px-lg-5">
        <div class="col-lg-3">
            @Html.Partial("AddFilePartial", Model.AddFileViewModel)
        </div>
        <div class="col-lg-9">
            @foreach (var files in Model.AllFiles)
            {
                <h2>@files.Key</h2>
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th class="w-12"></th>
                                <th class="w-36">File name</th>
                                <th class="w-12">Revision number</th>
                                <th class="w-8">Size (kB)</th>
                                <th class="w-32">Comment</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var file in files)
                            {
                                <tr>
                                    <td>
                                        <a href="@Url.Action("DownloadFile","Repository", new { fileId = file.Id })" title="Download file" aria-label="Download file" class="js-tooltip" data-placement="bottom">
                                            <i class="file-list--item-control material-icons">file_download</i>
                                        </a>

                                        <a href="@Url.Action("UpdateFile", new {fileId = file.Id})" title="Update file" aria-label="Update file" class="js-tooltip" data-placement="bottom">
                                            <i class="file-list--item-control material-icons">file_upload</i>
                                        </a>

                                        <a href="@Url.Action("FileHistory", new {fileId = file.Id})" title="File history" aria-label="File history" class="js-tooltip" data-placement="bottom">
                                            <i class="file-list--item-control material-icons">history</i>
                                        </a>

                                        <i class="file-list--item-control material-icons js-tooltip js-copy"
                                           title="Copy file path to clipboard"
                                           aria-label="Copy file"
                                           data-toggle="tooltip"
                                           data-placement="bottom"
                                           data-copy="@Url.Action("DownloadFile","Repository", new { fileId = file.Id }, Context.Request.Scheme)">
                                            content_copy
                                        </i>

                                        @if (Model.IsProjectLeader)
                                        {
                                            <a href="@Url.Action("HideFile", new {fileId = file.Id})" title="Delete file forever" aria-label="Delete file forever" class="js-tooltip" data-placement="bottom">
                                                <i class="file-list--item-control material-icons">delete_forever</i>
                                            </a>
                                        }

                                    </td>
                                    <td class="break-word-all">@file.FileName</td>
                                    <td>@file.RevisionNumber</td>
                                    <td>@file.FileSizeInKbs</td>
                                    <td>@file.Comment</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
    <h1>3D files viewer</h1>
    <h3>AMF viewer</h3>
    <div id="container"></div>
    <h3>STL viewer</h3>
    <div id="container2"></div>
    <h3>NEXUS or 3DHOP viewer</h3>
    <div id="container3"></div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <link rel="stylesheet"
          href="//cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.css"
          asp-fallback-href="~/dist/lib/dropzone.min.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/dropzone/5.2.0/dropzone.js"
            asp-fallback-src="~/dist/lib/dropzone.js">
    </script>
    <script src="~/dist/drag_and_drop_file_uploads.bundle.js"></script>
    <script src="~/dist/lib/three.min.js"></script>
    <script src="~/dist/lib/AMFLoader.js"></script>
    <script src="~/dist/lib/OrbitControls.js"></script>
    <script src="~/dist/lib/STLLoader.js"></script>
    <script src="~/dist/nexus/nexus.js"></script>
    <script src="~/dist/nexus/nexus_three.js"></script>
    <script>

        var camera, controls, scene, renderer;
        var lighting, ambient, keyLight, fillLight, backLight;
        init();
        animate();
        function init() {
            container = document.getElementById('container2');
            document.body.appendChild(container);

            /* Camera */
            camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
            camera.position.z = 50;

            /* Scene */
            scene = new THREE.Scene();
            lighting = false;
            ambient = new THREE.AmbientLight(0xffffff, 1.0);
            scene.add(ambient);
            keyLight = new THREE.DirectionalLight(new THREE.Color('hsl(30, 100%, 75%)'), 1.0);
            keyLight.position.set(-100, 0, 100);
            fillLight = new THREE.DirectionalLight(new THREE.Color('hsl(240, 100%, 75%)'), 0.75);
            fillLight.position.set(100, 0, 100);
            backLight = new THREE.DirectionalLight(0xffffff, 1.0);
            backLight.position.set(100, 0, -100).normalize();

            /* Model */
            var file = '../../clip.stl';

            /* Renderer */
            renderer = new THREE.WebGLRenderer();
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(1000, 1000);
            renderer.setClearColor(new THREE.Color("hsl(0, 0%, 10%)"));
            container.appendChild(renderer.domElement);

            var isLoaded3Dfile = load3Dfile(file);

            if (!isLoaded3Dfile) {
                console.log("Can't load the file!");
            }

            /* Controls */
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.25;
            controls.enableZoom = false;

            /* Events */
            window.addEventListener('keydown', onKeyboardEvent, false);
        }

        function onKeyboardEvent(e) {
            if (e.code === 'KeyL') {
                lighting = !lighting;
                if (lighting) {
                    ambient.intensity = 0.25;
                    scene.add(keyLight);
                    scene.add(fillLight);
                    scene.add(backLight);
                } else {
                    ambient.intensity = 1.0;
                    scene.remove(keyLight);
                    scene.remove(fillLight);
                    scene.remove(backLight);
                }
            } else if (e.code === 'KeyZ') {
                camera.fov = camera.fov + 1;
                camera.updateProjectionMatrix();

            } else if (e.code === 'KeyX') {
                camera.fov = camera.fov - 1;
                camera.updateProjectionMatrix();
            }
        }

        function animate() {
            requestAnimationFrame(animate);
            controls.update();
            render();
        }

        function render() {
            renderer.render(scene, camera);
        }

        function nexusRender() {
            Nexus.beginFrame(renderer.context);
            renderer.render(scene, camera);
            Nexus.endFrame(renderer.context);
        }

        function load3Dfile(filename) {
            var ext = getExtension(filename);
            switch (ext.toLowerCase()) {
                case 'stl':
                    var loader = new THREE.STLLoader();
                    loader.load(filename, function (geometry) {
                        var material = new THREE.MeshPhongMaterial();
                        var mesh = new THREE.Mesh(geometry, material);
                        scene.add(mesh);
                    });
                    return true;
                case 'amf':
                    var loader = new THREE.AMFLoader();
                    loader.load(filename, function (amfobject) {
                        scene.add(amfobject);
                    });
                    return true;
                case 'nxz':
                    var nexus_obj = new NexusObject(filename, renderer, nexusRender);
                    scene.add(nexus_obj);
                    return true;
            }
            return false;
        }

        function getExtension(filename) {
            var parts = filename.split('.');
            return parts[parts.length - 1];
        }

    </script>
}
