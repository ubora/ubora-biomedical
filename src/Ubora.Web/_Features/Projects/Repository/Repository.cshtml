@using Ubora.Web._Features.Projects._Shared
@model Ubora.Web._Features.Projects.Repository.ProjectRepositoryViewModel

@{
    ViewData["Title"] = "Repository";
    ViewData["MenuOption"] = ProjectMenuOption.Repository;
}

<div class="container-fluid my-4">
    <div class="row px-lg-5">
        <div class="col-lg-3">
            @Html.Partial("AddFilePartial", Model.AddFileViewModel)
        </div>
        <div class="col-lg-9">
            @foreach (var files in Model.AllFiles)
            {
                <h2>@files.Key</h2>
                <div class="table-responsive">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th class="w-12"></th>
                                <th class="w-36">File name</th>
                                <th class="w-12">Revision number</th>
                                <th class="w-8">Size (kB)</th>
                                <th class="w-32">Comment</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var file in files)
                            {
                                <tr>
                                    <td>
                                        <a href="@Url.Action("DownloadFile","Repository", new { fileId = file.Id })" title="Download file" aria-label="Download file" class="js-tooltip" data-placement="bottom">
                                            <i class="file-list--item-control material-icons">file_download</i>
                                        </a>

                                        <a href="@Url.Action("UpdateFile", new {fileId = file.Id})" title="Update file" aria-label="Update file" class="js-tooltip" data-placement="bottom">
                                            <i class="file-list--item-control material-icons">file_upload</i>
                                        </a>

                                        <a href="@Url.Action("FileHistory", new {fileId = file.Id})" title="File history" aria-label="File history" class="js-tooltip" data-placement="bottom">
                                            <i class="file-list--item-control material-icons">history</i>
                                        </a>

                                        <i class="file-list--item-control material-icons js-tooltip js-copy"
                                           title="Copy file path to clipboard"
                                           aria-label="Copy file"
                                           data-toggle="tooltip"
                                           data-placement="bottom"
                                           data-copy="@Url.Action("DownloadFile","Repository", new { fileId = file.Id }, Context.Request.Scheme)">
                                            content_copy
                                        </i>

                                        @if (Model.IsProjectLeader)
                                        {
                                            <a href="@Url.Action("HideFile", new {fileId = file.Id})" title="Delete file forever" aria-label="Delete file forever" class="js-tooltip" data-placement="bottom">
                                                <i class="file-list--item-control material-icons">delete_forever</i>
                                            </a>
                                        }

                                    </td>
                                    <td class="break-word-all">@file.FileName</td>
                                    <td>@file.RevisionNumber</td>
                                    <td>@file.FileSizeInKbs</td>
                                    <td>@file.Comment</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
    <h1>3D files viewer</h1>
    <h3>AMF viewer</h3>
    <div id="container"></div>
    <h3>STL viewer</h3>
    <div id="container2"></div>
    <h3>NEXUS or 3DHOP viewer</h3>
    <div id="container3"></div>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <link rel="stylesheet"
          href="//cdnjs.cloudflare.com/ajax/libs/dropzone/5.1.1/min/dropzone.min.css"
          asp-fallback-href="~/dist/lib/dropzone.min.css">
    <script src="//cdnjs.cloudflare.com/ajax/libs/dropzone/5.2.0/dropzone.js"
            asp-fallback-src="~/dist/lib/dropzone.js">
    </script>
    <script src="~/dist/drag_and_drop_file_uploads.bundle.js"></script>
    <script src="~/dist/lib/three.min.js"></script>
    <script src="~/dist/lib/AMFLoader.js"></script>
    <script src="~/dist/lib/OrbitControls.js"></script>
    <script src="~/dist/lib/STLLoader.js"></script>
    <script>

        initAMFViewer();
        initSTLViewer();
        initNEXUSViewer();
        function initAMFViewer() {
            var camera, scene, renderer;
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x999999);
            scene.add(new THREE.AmbientLight(0x999999));
            camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 500);
            // Z is up for objects intended to be 3D printed.
            camera.up.set(0, 0, 1);
            camera.position.set(0, -9, 6);
            camera.add(new THREE.PointLight(0xffffff, 0.8));
            scene.add(camera);
            var grid = new THREE.GridHelper(50, 50, 0xffffff, 0x555555);
            grid.rotateOnAxis(new THREE.Vector3(1, 0, 0), 90 * (Math.PI / 180));
            scene.add(grid);
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(1000, 1000);
            document.body.appendChild(renderer.domElement);
            var loader = new THREE.AMFLoader();
            loader.load('../../rook.amf', function (amfobject) {
                scene.add(amfobject);
                render();
            });
            var controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.addEventListener('change', render);
            controls.target.set(0, 1.2, 2);
            controls.update();
            window.addEventListener('resize', onWindowResize, false);

            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
                render();
            }

            function render() {
                renderer.render(scene, camera);
                container = document.getElementById('container');
                container.appendChild(renderer.domElement);
            }
        }

        function initSTLViewer() {
            var camera, scene, renderer;
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x999999);
            scene.add(new THREE.AmbientLight(0x999999));
            camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 500);
            // Z is up for objects intended to be 3D printed.
            camera.up.set(0, 0, 1);
            camera.position.set(0, -9, 6);
            camera.add(new THREE.PointLight(0xffffff, 0.8));
            scene.add(camera);
            var grid = new THREE.GridHelper(50, 50, 0xffffff, 0x555555);
            grid.rotateOnAxis(new THREE.Vector3(1, 0, 0), 90 * (Math.PI / 180));
            scene.add(grid);
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(1000, 1000);
            document.body.appendChild(renderer.domElement);
            var loader = new THREE.STLLoader();
            loader.load('../../clip.stl', function (geometry) {
                var material = new THREE.MeshPhongMaterial({ color: 0xff5533, specular: 0x111111, shininess: 200 });
                var mesh = new THREE.Mesh(geometry, material);
                mesh.position.set(0, - 0.25, 0.6);
                mesh.rotation.set(0, - Math.PI / 2, 0);
                mesh.scale.set(0.5, 0.5, 0.5);
                mesh.castShadow = true;
                mesh.receiveShadow = true;
                scene.add(mesh);
                render();
            });
            var controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.addEventListener('change', render);
            controls.target.set(0, 1.2, 2);
            controls.update();
            window.addEventListener('resize', onWindowResize, false);

            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
                render();
            }

            function render() {
                renderer.render(scene, camera);
                container = document.getElementById('container2');
                container.appendChild(renderer.domElement);
            }
        }

        function initNEXUSViewer() {
            var camera, scene, renderer;
            scene = new THREE.Scene();
            scene.background = new THREE.Color(0x999999);
            scene.add(new THREE.AmbientLight(0x999999));
            camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 500);
            // Z is up for objects intended to be 3D printed.
            camera.up.set(0, 0, 1);
            camera.position.set(0, -9, 6);
            camera.add(new THREE.PointLight(0xffffff, 0.8));
            scene.add(camera);
            var grid = new THREE.GridHelper(50, 50, 0xffffff, 0x555555);
            grid.rotateOnAxis(new THREE.Vector3(1, 0, 0), 90 * (Math.PI / 180));
            scene.add(grid);
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(1000, 1000);
            document.body.appendChild(renderer.domElement);
            var loader = new THREE.STLLoader();
            loader.load('../../clip.stl', function (geometry) {
                var material = new THREE.MeshPhongMaterial({ color: 0xff5533, specular: 0x111111, shininess: 200 });
                var mesh = new THREE.Mesh(geometry, material);
                mesh.position.set(0, - 0.25, 0.6);
                mesh.rotation.set(0, - Math.PI / 2, 0);
                mesh.scale.set(0.5, 0.5, 0.5);
                mesh.castShadow = true;
                mesh.receiveShadow = true;
                scene.add(mesh);
                render();
            });
            var controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.addEventListener('change', render);
            controls.target.set(0, 1.2, 2);
            controls.update();
            window.addEventListener('resize', onWindowResize, false);

            function onWindowResize() {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
                render();
            }

            function render() {
                renderer.render(scene, camera);
                container = document.getElementById('container3');
                container.appendChild(renderer.domElement);
            }
        }


    </script>
}
