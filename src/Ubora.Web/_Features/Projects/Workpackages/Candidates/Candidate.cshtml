@model Ubora.Web._Features.Projects.Workpackages.Candidates.CandidateViewModel

<div class="col-lg-7">

    <div class="row mb-4">
        <div class="col">
            <h1>Voting</h1>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-lg-6">
          <div class="card">
              <img class="card-img-top img-fluid w-100" src="@Model.ImageUrl" alt="Illustrative project photo" />
              @if (await AuthorizationService.IsAuthorizedAsync(User, Policies.CanChangeProjectCandidateImage))
              {
                  <div class="card-img-overlay text-center">
                      @if ((await AuthorizationService.AuthorizeAsync(User, null, Policies.CanChangeProjectCandidateImage)).Succeeded)
                      {
                          <a class="mx-1" href="@Url.Action("EditCandidateImage", "Candidates", new { candidateId = Model.Id })">
                              <i class="material-icons align-middle" id="EditImage">mode_edit</i><span class="align-middle">Change image</span>
                          </a>
                      }

                      @if (Model.HasImage && (await AuthorizationService.AuthorizeAsync(User, null, Policies.CanRemoveProjectCandidateImage)).Succeeded)
                      {
                          <a class="mx-1" href="@Url.Action("RemoveCandidateImage", "Candidates", new { candidateId = Model.Id })">
                              <i class="material-icons align-middle">delete_forever</i><span class="align-middle">Remove image</span>
                          </a>
                      }
                  </div>

              }
          </div>
        </div>
        <div class="col-lg-6">
            <div class="row">
                <div class="col-lg-9">
                    <h2 class="mb-4">@Model.Title</h2>
                </div>
                <div class="col-lg-3 d-flex justify-content-end">
                    @if ((await AuthorizationService.AuthorizeAsync(User, null, Policies.CanEditProjectCandidate)).Succeeded)
                    {
                        <a class="btn btn-outline-primary align-self-start" href="@Url.Action("EditCandidate", "Candidates", new { candidateId = Model.Id })">
                            <i class="material-icons" id="EditImage">mode_edit</i>
                            <span>Edit</span>
                        </a>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p>@Model.Description</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mb-4">

        <div class="col-lg-6">
            <div class="row">
                <div class="col-lg-12">
                    <h2 class="mb-4">All votes</h2>
                </div>
                <div class="col-lg-4 d-flex align-items-center justify-content-center">
                    <div class="circle voted average-number d-flex align-items-center justify-content-center">
                        @Model.TotalScore.ToString("0.0")
                    </div>
                </div>
                <div class="col-lg-8">
                    <span>Very good: 16-20</span>
                    <div class="progress mb-1">
                        <div class="progress-bar" role="progressbar" style="width: @(Model.ScorePercentageVeryGood)%"></div>
                    </div>
                    <span>Good: 11-15</span>
                    <div class="progress mb-1">
                        <div class="progress-bar" role="progressbar" style="width: @(Model.ScorePercentageGood)%"></div>
                    </div>
                    <span>Mediocre: 6-10</span>
                    <div class="progress mb-1">
                        <div class="progress-bar" role="progressbar" style="width: @(Model.ScorePercentageMediocre)%"></div>
                    </div>
                    <span>Poor: 1-5</span>
                    <div class="progress mb-1">
                        <div class="progress-bar" role="progressbar" style="width: @(Model.ScorePercentagePoor)%"></div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-6">
            @(Model.HasUserVoted ? Html.Partial("_VotePartial", Model.UserVotesViewModel) : Html.Partial("_AddVotePartial", Model.AddVoteViewModel))
        </div>

    </div>

    <div class="row mb-4">
        <div class="col-sm-12 col-lg-6">
            <div class="row">
                <div class="col-lg-12">
                    <h2 class="mb-4">All comments</h2>
                </div>
                <div class="col-lg-12">
                    <div class="row">
                        @foreach (var comment in Model.Comments)
                        {
                            <div class="col-lg-2">
                                <img class="avatar avatar-comment" src="@comment.ProfilePictureUrl" />
                            </div>
                            <div class="col-lg-10 mb-4">
                                <span class="d-block">
                                    <strong><a asp-controller="Profile" asp-action="ViewProfile" asp-route-userId="@comment.CommentatorId">@comment.CommentatorName</a></strong>
                                    @if (comment.IsLeader)
                                    {
                                        <i class="material-icons align-middle" title="Project leader">supervisor_account</i>
                                    }
                                    @if (comment.IsMentor)
                                    {
                                        <i class="material-icons align-middle" title="Project mentor">school</i>
                                    }
                                </span>
                                <span class="comment more">
                                @comment.CommentText

                                </span>
                                @if (comment.IsEdited)
                                {
                                    <span class="color-grey">(edited)</span>
                                }
                                <span class="d-block mt-2 comment-section">
                                    @if (comment.CanBeEdited)
                                    {
                                        <div class="d-flex align-items-center">
                                            <button class="btn btn-link mr-2" role="button" data-toggle="collapse" data-target="#@comment.Id">Edit</button>
                                            <button class="btn btn-link mr-2" role="button" data-toggle="modal" data-target="#removeCommentModal-@comment.Id">Delete</button>
                                            <span class="timeago" title="@(comment.CommentEditedAt.ToString() + 'Z')">@(comment.CommentEditedAt.ToString("dd.MM.yyyy"))</span>
                                        </div>
                                        @Html.Partial("RemoveCommentModal", comment.EditCommentViewModel)
                                        <div class="collapse mt-2" id="@comment.Id">@Html.Partial("_EditCommentPartial", comment.EditCommentViewModel)</div>
                                       
                                    }
                                    else
                                    {
                                        <span class="timeago" title="@(comment.CommentEditedAt.ToString() + 'Z')">@(comment.CommentEditedAt.ToString("dd.MM.yyyy"))</span>
                                    }
                                </span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-lg-6">
            <div>
                @Html.Partial("_AddCommentPartial", Model.AddCommentViewModel)
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="~/dist/voting.bundle.js"></script>
    <script src="~/dist/show_more.bundle.js"></script>
}
