@using Ubora.Web._Features._Shared.Helpers
@model Ubora.Web._Features.Projects.Workpackages.Steps.PreproductionDocuments.WP2TemplatePartialViewModel

@{
    var isNonEmptyPhysicalPrinciples = !String.IsNullOrEmpty(Model.PhysicalPrinciples);
    var isNonEmptyConceptDescription = !String.IsNullOrEmpty(Model.ConceptDescription);
}

@if (isNonEmptyPhysicalPrinciples || isNonEmptyConceptDescription)
{
    <h1>Conceptual design</h1>
}

@if (isNonEmptyPhysicalPrinciples)
{
    <h2>Physical principles</h2>

    @Html.Raw(Model.PhysicalPrinciples)
}

@if (isNonEmptyConceptDescription)
{
    <h2>Concept description</h2>

    @Html.Raw(Model.ConceptDescription) 
}

@if (Model.StructuredInformationResultViewModel.IsUserAndEnvironmentEdited)
{
    <h2>User and evironment</h2>
    
    <table>
        <tbody>
        <tr>
            <th>Who is the intended user?</th>
            <td>
                @if (!string.IsNullOrEmpty(Model.StructuredInformationResultViewModel.UserAndEnvironment.IntendedUser))
                {
                    @Model.StructuredInformationResultViewModel.UserAndEnvironment.IntendedUser
                }
            </td>
        </tr>
        <tr>
            <th>Is training required in addition to the expected skill level of the intended user?</th>
            <td>@Model.StructuredInformationResultViewModel.UserAndEnvironment.IsTrainingRequiredInAdditionToExpectedSkillLevelOfIntentedUser.ToYesNo()</td>
        </tr>
        @if (Model.StructuredInformationResultViewModel.UserAndEnvironment.IsTrainingRequiredInAdditionToExpectedSkillLevelOfIntentedUser)
        {
            <tr>
                <th>If training is required, please describe who will deliver the training and the materials and time required for the training.</th>
                <td>@Model.StructuredInformationResultViewModel.UserAndEnvironment.IfTrainingIsRequiredPleaseDescribeWhoWillDeliverTrainingAndMaterialsAndTimeRequiredForTraining</td>
            </tr>
        }
        <tr>
            <th>Is any maintenance or calibration required by the user at the time of use?</th>
            <td>@Model.StructuredInformationResultViewModel.UserAndEnvironment.IsAnyMaintenanceOrCalibrationRequiredByUserAtTimeOfUse.ToYesNo()</td>
        </tr>

        <tr>
            <th>Where will the technology be used?</th>
            <td>
                @if (Model.StructuredInformationResultViewModel.UserAndEnvironment.WhereWillTechnologyBeUsed.GetResult().Any())
                {
                    @string.Join(", ", Model.StructuredInformationResultViewModel.UserAndEnvironment.WhereWillTechnologyBeUsed.GetResult())
                }
            </td>
        </tr>
        </tbody>
    </table>
}

@if (Model.StructuredInformationResultViewModel.IsHealthTechnologySpecificationEdited)
{
    <h2>Health technology specifications</h2>
    
    <table>
        <tbody>
        <tr>
            <th>Dimensions (mm<sup>3</sup>)</th>
            <td>
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DeviceMeasurementsViewModel.IsAllDimensionsSet)
                {
                    @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DeviceMeasurementsViewModel.DimensionsLength
                    <span>mm x</span>
                    @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DeviceMeasurementsViewModel.DimensionsWidth
                    <span>mm x</span>
                    @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DeviceMeasurementsViewModel.DimensionsHeight
                    <span>mm</span>
                }
            </td>
        </tr>
        <tr>
            <th>Weight (kg)</th>
            <td>
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DeviceMeasurementsViewModel.WeightInKilograms != 0)
                {
                    @(Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DeviceMeasurementsViewModel.WeightInKilograms)
                    <span>kg</span>
                }
            </td>
        </tr>
        <tr>
            <th>Does it require the use of consumables? For example, disposable batteries, disposable electrodes, etc.</th>
            @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DoesItRequireUseOfConsumables == true)
            {
                <td>Yes. @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.IfRequiresConsumablesListConsumables</td>
            }
            else
            {
                <td>@Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DoesItRequireUseOfConsumables?.ToYesNo()</td>
            }
        </tr>
        <tr>
            <th>Estimated life time</th>
            <td>
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedLifeTimeInDays != 0)
                {
                    @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedLifeTimeInDays
                    <span>Days</span>
                }
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedLifeTimeInMonths != 0)
                {
                    @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedLifeTimeInMonths
                    <span>Months</span>
                }
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedLifeTimeInYears != 0)
                {
                    @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedLifeTimeInYears
                    <span>Years</span>
                }
            </td>
        </tr>
        <tr>
            <th>Estimated shelf life</th>
            <td>
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedShelfLifeInDays != 0)
                {
                    @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedShelfLifeInDays
                    <span>Days</span>
                }
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedShelfLifeInMonths != 0)
                {
                    @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedShelfLifeInMonths
                    <span>Months</span>
                }
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedShelfLifeInYears != 0)
                {
                    @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EstimatedShelfLifeInYears
                    <span>Years</span>
                }
            </td>
        </tr>
        <tr>
            <th>Can it have a telemedicine or eHealth application?</th>
            <td>@Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.CanItHaveATelemedicineOrEHealthApplication.ToYesNo()</td>
        </tr>
        <tr>
            <th>Does it use any kind of software?</th>
            <td>@Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.DoesItUseAnyKindOfSoftware.ToYesNo()</td>
        </tr>
        @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.DoesItUseAnyKindOfSoftware)
        {
            <tr>
                <th>If yes, please describe the software, whether it is open source or proprietary, its use and/or license fee, etc. (10-70 words).</th>
                <td>@Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.IfUsesSoftwareDescribeSoftware</td>
            </tr>
            <tr>
                <th>If yes, can the software be customized for local use? Please explain (10-70 words). Include languages available.</th>
                <td>@Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.IfUsesSoftwareCanSoftwareBeCustomizedForLocalUse</td>
            </tr>
        }
        <tr>
            <th>Is it portable?</th>
            <td>@Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.Portability</td>
        </tr>
        <tr>
            <th>Type of use</th>
            <td>@Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.TypeOfUse</td>
        </tr>
        <tr>
            <th>Does the technology require maintenance?</th>
            <td>
                <p>@Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DoesTechnologyRequireMaintenance.ToYesNo()</p>
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DoesTechnologyRequireMaintenance)
                {
                    <p>Type: @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceSpecifyType</p>
                    <p>Frequency: @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceSpecifyFrequency</p>
                    <p>Can it be done on-site / home / community?: @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceCanItBeDoneOnSiteOrHomeOrCommunity.ToYesNo()</p>
                }
            </td>
        </tr>
        @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.DoesTechnologyRequireMaintenance)
        {
            <tr>
                <th>If yes, who should provide maintenance?</th>
                <td>@Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceWhoShouldProvideMaintenance</td>
            </tr>
        }
        <tr>
            <th>Energy requirements</th>
            <td>
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.MechanicalEnergy)
                {
                    <p>Mechanical energy (e.g. manually powered)</p>
                }
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.Batteries)
                {
                    <p>Batteries</p>
                }
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.PowerSupplyForRecharging)
                {
                    <p>
                        <span>Power supply for recharging</span>
                        <span>Voltage required: @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredVoltage V</span>
                        <span>Time required to recharge: @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredTimeToRechargeInHours hours @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredTimeToRechargeInMinutes minutes</span>
                        <span>Battery life with full charge: @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredBatteryLifeInHours hours @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredBatteryLifeInMinutes minutes</span>
                    </p>
                }
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.ContinuousPowerSupply)
                {
                    <p>
                        <span>Continuous power supply</span>
                        <span>Voltage required: @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfContinuousPowerSupplyThenRequiredVoltage V</span>
                    </p>
                }
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.SolarPower)
                {
                    <p>
                        <span>Solar power</span>
                        <span>Time in sunlight required to charge: @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenTimeInSunlightRequiredToChargeInHours hours @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenTimeInSunlightRequiredToChargeInMinutes minutes</span>
                        <span>Battery life with full charge: @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenBatteryLifeInHours hours @Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenBatteryLifeInMinutes minutes</span>
                    </p>
                }
                @if (Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.Other)
                {
                    <p>@Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.EnergyRequirementsViewModel.OtherText</p>
                }
            </td>
        </tr>
        <tr>
            <th>Facility requirements</th>
            <td>
                @foreach (var item in Model.StructuredInformationResultViewModel.HealthTechnologySpecifications.FacilityRequirementsViewModel.GetResult())
                {
                    <p>@item</p>
                }
            </td>
        </tr>
        </tbody>
    </table>
}