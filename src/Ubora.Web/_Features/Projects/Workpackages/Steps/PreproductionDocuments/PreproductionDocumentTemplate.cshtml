@using Ubora.Web._Features._Shared.Helpers
@model Ubora.Web._Features.Projects.Workpackages.Steps.PreproductionDocuments.PreproductionDocumentTemplateViewModel

<html>
<body>
<head>
    <title>@Model.Title</title>
</head>
<p></p>
<h1>Medical tags</h1>
<p></p>
<img src="@Model.ImagePath">
<p>
    <strong>Clinical need</strong>
</p>
<p>@Model.ClinicalNeedTag</p>
<p></p>
<p>
    <strong>Area</strong>
</p>
<p>@Model.AreaOfUsageTag</p>
<p></p>
<p>
    <strong>Technology</strong>
</p>
<p>@Model.PotentialTechnologyTag</p>
<p></p>
<p>
    <strong>Project keywords</strong>
</p>
<p>@Model.Keywords</p>
<p></p>
<p>
    <strong>Device classification</strong>
</p>
<p>@Model.DeviceClassification</p>
<p></p>

<h1>Project description</h1>
<p></p>
<p>
    @Model.ProjectDescription
</p>
<p></p>

<h1>Members</h1>
<table>
    <tr>
        <th>Name</th>
        <th>Role</th>
    </tr>
    @foreach (var member in Model.Members)
    {
    <tr>
        <td>@member.FullName</td>
        <td>@member.Roles</td>
    </tr>
    }
</table>


<h1>Project context</h1>

<h2>Clinical needs</h2>
@Html.Raw(Model.ClinicalNeeds)

<h2>Existing solutions</h2>
@Html.Raw(Model.ExistingSolutions)

<h2>Proposed solution and its innovative aspects</h2>
@Html.Raw(Model.ConceptDescription)

<h2>Intended users</h2>
@Html.Raw(Model.IntendedUsers)

<div>
    <div>
        <h1>ISO compliance</h1>
    </div>
    <div>
        @foreach (var isoStandard in Model.IsoCompliance.IsoStandards)
        {
            if (isoStandard.IsMarkedAsCompliant)
            {
                <div>
                    <div>
                        <input type="checkbox"/>
                        <label>
                            <a href="@isoStandard.Link">@isoStandard.Title</a>
                        </label>
                    </div>
                </div>

                if (!string.IsNullOrWhiteSpace(isoStandard.ShortDescription))
                {
                    <p>
                        @isoStandard.ShortDescription
                    </p>
                }
            }
        }
    </div>
</div>

<h1>Design and prototyping</h1>

<h2>User and evironment</h2>
@if (Model.StructuredInformationResult.IsUserAndEnvironmentEdited)
{    
    <table>
        <tbody>
        <tr>
            <td>Who is the intended user?</td>
            <td>
                @if (!string.IsNullOrEmpty(Model.StructuredInformationResult.UserAndEnvironment.IntendedUser))
                {
                    @Model.StructuredInformationResult.UserAndEnvironment.IntendedUser
                }
            </td>
        </tr>
        <tr>
            <td>Is training required in addition to the expected skill level of the intended user?</td>
            <td>@Model.StructuredInformationResult.UserAndEnvironment.IsTrainingRequiredInAdditionToExpectedSkillLevelOfIntentedUser.ToYesNo()</td>
        </tr>
        @if (Model.StructuredInformationResult.UserAndEnvironment.IsTrainingRequiredInAdditionToExpectedSkillLevelOfIntentedUser)
        {
            <tr>
                <th>If training is required, please describe who will deliver the training and the materials and time required for the training.</th>
                <td>@Model.StructuredInformationResult.UserAndEnvironment.IfTrainingIsRequiredPleaseDescribeWhoWillDeliverTrainingAndMaterialsAndTimeRequiredForTraining</td>
            </tr>
        }
        <tr>
            <td>Is any maintenance or calibration required by the user at the time of use?</td>
            <td>@Model.StructuredInformationResult.UserAndEnvironment.IsAnyMaintenanceOrCalibrationRequiredByUserAtTimeOfUse.ToYesNo()</td>
        </tr>

        <tr>
            <td>Where will the technology be used?</td>
            <td>
                @if (Model.StructuredInformationResult.UserAndEnvironment.WhereWillTechnologyBeUsed.GetResult().Any())
                {
                    @string.Join(", ", Model.StructuredInformationResult.UserAndEnvironment.WhereWillTechnologyBeUsed.GetResult())
                }
            </td>
        </tr>
        </tbody>
    </table>
}

<div style="page-break-before: always;"></div>

<h2>Health technology specifications</h2>
@if (Model.StructuredInformationResult.IsHealthTechnologySpecificationEdited)
{    
    <table>
        <tbody>
        <tr>
            <th>Dimensions (mm<sup>3</sup>)</th>
            <td>
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.IsAllDimensionsSet)
                {
                    @Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.DimensionsLength
                    <span>mm x</span>
                    @Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.DimensionsWidth
                    <span>mm x</span>
                    @Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.DimensionsHeight
                    <span>mm</span>
                }
            </td>
        </tr>
        <tr>
            <th>Weight (kg)</th>
            <td>
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.WeightInKilograms != 0)
                {
                    @(Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.WeightInKilograms)
                    <span>kg</span>
                }
            </td>
        </tr>
        <tr>
            <th>Does it require the use of consumables? For example, disposable batteries, disposable electrodes, etc.</th>
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DoesItRequireUseOfConsumables == true)
            {
                <td>Yes. @Model.StructuredInformationResult.HealthTechnologySpecifications.IfRequiresConsumablesListConsumables</td>
            }
            else
            {
                <td>@Model.StructuredInformationResult.HealthTechnologySpecifications.DoesItRequireUseOfConsumables?.ToYesNo()</td>
            }
        </tr>
        <tr>
            <th>Estimated life time</th>
            <td>
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInDays != 0)
                {
                    @Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInDays
                    <span>Days</span>
                }
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInMonths != 0)
                {
                    @Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInMonths
                    <span>Months</span>
                }
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInYears != 0)
                {
                    @Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInYears
                    <span>Years</span>
                }
            </td>
        </tr>
        <tr>
            <th>Estimated shelf life</th>
            <td>
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInDays != 0)
                {
                    @Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInDays
                    <span>Days</span>
                }
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInMonths != 0)
                {
                    @Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInMonths
                    <span>Months</span>
                }
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInYears != 0)
                {
                    @Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInYears
                    <span>Years</span>
                }
            </td>
        </tr>
        <tr>
            <th>Can it have a telemedicine or eHealth application?</th>
            <td>@Model.StructuredInformationResult.HealthTechnologySpecifications.CanItHaveATelemedicineOrEHealthApplication.ToYesNo()</td>
        </tr>
        <tr>
            <th>Does it use any kind of software?</th>
            <td>@Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.DoesItUseAnyKindOfSoftware.ToYesNo()</td>
        </tr>
        @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.DoesItUseAnyKindOfSoftware)
        {
            <tr>
                <th>If yes, please describe the software, whether it is open source or proprietary, its use and/or license fee, etc. (10-70 words).</th>
                <td>@Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.IfUsesSoftwareDescribeSoftware</td>
            </tr>
            <tr>
                <th>If yes, can the software be customized for local use? Please explain (10-70 words). Include languages available.</th>
                <td>@Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.IfUsesSoftwareCanSoftwareBeCustomizedForLocalUse</td>
            </tr>
        }
        <tr>
            <th>Is it portable?</th>
            <td>@Model.StructuredInformationResult.HealthTechnologySpecifications.Portability</td>
        </tr>
        <tr>
            <th>Type of use</th>
            <td>@Model.StructuredInformationResult.HealthTechnologySpecifications.TypeOfUse</td>
        </tr>
        <tr>
            <th>Does the technology require maintenance?</th>
            <td>
                <p>@Model.StructuredInformationResult.HealthTechnologySpecifications.DoesTechnologyRequireMaintenance.ToYesNo()</p>
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DoesTechnologyRequireMaintenance)
                {
                    <p>Type: @Model.StructuredInformationResult.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceSpecifyType</p>
                    <p>Frequency: @Model.StructuredInformationResult.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceSpecifyFrequency</p>
                    <p>Can it be done on-site / home / community?: @Model.StructuredInformationResult.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceCanItBeDoneOnSiteOrHomeOrCommunity.ToYesNo()</p>
                }
            </td>
        </tr>
        @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DoesTechnologyRequireMaintenance)
        {
            <tr>
                <th>If yes, who should provide maintenance?</th>
                <td>@Model.StructuredInformationResult.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceWhoShouldProvideMaintenance</td>
            </tr>
        }
        <tr>
            <th>Energy requirements</th>
            <td>
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.MechanicalEnergy)
                {
                    <p>Mechanical energy (e.g. manually powered)</p>
                }
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.Batteries)
                {
                    <p>Batteries</p>
                }
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.PowerSupplyForRecharging)
                {
                    <p>
                        <span>Power supply for recharging</span>
                        <span>Voltage required: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredVoltage V</span>
                        <span>Time required to recharge: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredTimeToRechargeInHours hours @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredTimeToRechargeInMinutes minutes</span>
                        <span>Battery life with full charge: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredBatteryLifeInHours hours @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredBatteryLifeInMinutes minutes</span>
                    </p>
                }
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.ContinuousPowerSupply)
                {
                    <p>
                        <span>Continuous power supply</span>
                        <span>Voltage required: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfContinuousPowerSupplyThenRequiredVoltage V</span>
                    </p>
                }
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.SolarPower)
                {
                    <p>
                        <span>Solar power</span>
                        <span>Time in sunlight required to charge: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenTimeInSunlightRequiredToChargeInHours hours @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenTimeInSunlightRequiredToChargeInMinutes minutes</span>
                        <span>Battery life with full charge: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenBatteryLifeInHours hours @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenBatteryLifeInMinutes minutes</span>
                    </p>
                }
                @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.Other)
                {
                    <p>@Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.OtherText</p>
                }
            </td>
        </tr>
        <tr>
            <th>Facility requirements</th>
            <td>
                @foreach (var item in Model.StructuredInformationResult.HealthTechnologySpecifications.FacilityRequirementsViewModel.GetResult())
                {
                    <p>@item</p>
                }
            </td>
        </tr>
        </tbody>
    </table>
}

<h1>Design prototyping</h1>
@Html.Raw(Model.PrototypesAndConsiderationsForSafetyAssessment)

<h1>Quality criteria and validation test</h1>
@Html.Raw(Model.QualityCriteria)
</body>
</html>