@using Ubora.Web._Features._Shared.Helpers
@model Ubora.Web._Features.Projects.Workpackages.Steps.PreproductionDocuments.PreproductionDocumentTemplateViewModel

<html>
<body>
<head>
    <title>@Model.Title</title>
</head>

<h1>Medical tags</h1>

<dl>
    <dt>Clinical need</dt>
    <dd>@Model.ClinicalNeedTag</dd>
    <dt>Area</dt>
    <dd>@Model.AreaOfUsageTag</dd>
    <dt>Technology</dt>
    <dd>@Model.PotentialTechnologyTag</dd>
    <dt>Project keywords</dt>
    <dd>@Model.Keywords</dd>
    <dt>Device classification</dt>
    <dd>@Model.DeviceClassification</dd>
</dl>

<img src="@Model.ImagePath">

<h1>Project description</h1>
@Html.Raw(Model.ProjectDescription)

<h1>Members</h1>
<ul>
    @foreach (var member in Model.Members)
    {
        <li>@member.FullName @(!string.IsNullOrWhiteSpace(member.Roles) ? $"({member.Roles})" : "")</li>
    }
</ul>

<h1>Project context</h1>

<h2>Clinical needs</h2>
@Html.Raw(Model.ClinicalNeeds)

<h2>Existing solutions</h2>
@Html.Raw(Model.ExistingSolutions)

<h2>Proposed solution and its innovative aspects</h2>
@Html.Raw(Model.ConceptDescription)

<h2>Intended users</h2>
@Html.Raw(Model.IntendedUsers)

<h1>ISO compliance</h1>
@foreach (var isoStandard in Model.IsoCompliance.IsoStandards.Select(x => x.IsoStandard).ToList())
{
    if (isoStandard.IsMarkedAsCompliant)
    {
        <a href="@isoStandard.Link">@isoStandard.Title</a>
        @if (!string.IsNullOrWhiteSpace(isoStandard.ShortDescription))
        {
            <p>@isoStandard.ShortDescription</p>
        }
    }
}

<h1>Design and prototyping</h1>

<h2>User and evironment</h2>
@if (Model.StructuredInformationResult.IsUserAndEnvironmentEdited)
{
    <dl>
        <dt>Who is the intended user?</dt>
        <dd>
            @if (!string.IsNullOrEmpty(Model.StructuredInformationResult.UserAndEnvironment.IntendedUser))
            {
                @Model.StructuredInformationResult.UserAndEnvironment.IntendedUser
            }
        </dd>
        <dt>Is training required in addition to the expected skill level of the intended user?</dt>
        <dd>@Model.StructuredInformationResult.UserAndEnvironment.IsTrainingRequiredInAdditionToExpectedSkillLevelOfIntentedUser.ToYesNo()</dd>
        @if (Model.StructuredInformationResult.UserAndEnvironment.IsTrainingRequiredInAdditionToExpectedSkillLevelOfIntentedUser)
        {
            <dt>If training is required, please describe who will deliver the training and the materials and time required for the training.</dt>
            <dd>@Model.StructuredInformationResult.UserAndEnvironment.IfTrainingIsRequiredPleaseDescribeWhoWillDeliverTrainingAndMaterialsAndTimeRequiredForTraining</dd>
        }
        <dt>Is any maintenance or calibration required by the user at the time of use?</dt>
        <dd>@Model.StructuredInformationResult.UserAndEnvironment.IsAnyMaintenanceOrCalibrationRequiredByUserAtTimeOfUse.ToYesNo()</dd>

        <dt>Where will the technology be used?</dt>
        <dd>
            @if (Model.StructuredInformationResult.UserAndEnvironment.WhereWillTechnologyBeUsed.GetResult().Any())
            {
                @string.Join(", ", Model.StructuredInformationResult.UserAndEnvironment.WhereWillTechnologyBeUsed.GetResult())
            }
        </dd>
    </dl>
}

<h2>Health technology specifications</h2>
@if (Model.StructuredInformationResult.IsHealthTechnologySpecificationEdited)
{
    <dl>
        <dt>Dimensions (mm<sup>3</sup>)</dt>
        <dd>
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.IsAllDimensionsSet)
            {
                <text>@Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.DimensionsLength mm x</text>
                <text>@Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.DimensionsWidth mm x</text>
                <text>@Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.DimensionsHeight mm</text>
            }
        </dd>

        <dt>Weight (kg)</dt>
        <dd>
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.WeightInKilograms != 0)
            {
                <text>@Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceMeasurementsViewModel.WeightInKilograms kg</text>
            }
        </dd>


        <dt>Does it require the use of consumables? For example, disposable batteries, disposable electrodes, etc.</dt>
        @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DoesItRequireUseOfConsumables == true)
        {
            <dd>Yes. @Model.StructuredInformationResult.HealthTechnologySpecifications.IfRequiresConsumablesListConsumables</dd>
        }
        else
        {
            <dd>@Model.StructuredInformationResult.HealthTechnologySpecifications.DoesItRequireUseOfConsumables?.ToYesNo()</dd>
        }

        <dt>Estimated life time</dt>
        <dd>
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInDays != 0)
            {
                <text>@Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInDays Days</text>
            }
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInMonths != 0)
            {
                <text>@Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInMonths Months</text>
            }
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInYears != 0)
            {
                <text>@Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedLifeTimeInYears Years</text>
            }
        </dd>

        <dt>Estimated shelf life</dt>
        <dd>
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInDays != 0)
            {
                <text>@Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInDays Days</text>
            }
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInMonths != 0)
            {
                <text>@Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInMonths Months</text>
            }
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInYears != 0)
            {
                <text>@Model.StructuredInformationResult.HealthTechnologySpecifications.EstimatedShelfLifeInYears Years</text>
            }
        </dd>

        <dt>Can it have a telemedicine or eHealth application?</dt>
        <dd>@Model.StructuredInformationResult.HealthTechnologySpecifications.CanItHaveATelemedicineOrEHealthApplication.ToYesNo()</dd>

        <dt>Does it use any kind of software?</dt>
        <dd>@Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.DoesItUseAnyKindOfSoftware.ToYesNo()</dd>

        @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.DoesItUseAnyKindOfSoftware)
        {
            <dt>If yes, please describe the software, whether it is open source or proprietary, its use and/or license fee, etc. (10-70 words).</dt>
            <dd><p>@Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.IfUsesSoftwareDescribeSoftware</p></dd>

            <dt>If yes, can the software be customized for local use? Please explain (10-70 words). Include languages available.</dt>
            <dd><p>@Model.StructuredInformationResult.HealthTechnologySpecifications.DeviceSoftwareUsageViewModel.IfUsesSoftwareCanSoftwareBeCustomizedForLocalUse</p></dd>
        }

        <dt>Is it portable?</dt>
        <dd>@Model.StructuredInformationResult.HealthTechnologySpecifications.Portability</dd>

        <dt>Type of use</dt>
        <dd>@Model.StructuredInformationResult.HealthTechnologySpecifications.TypeOfUse</dd>

        <dt>Does the technology require maintenance?</dt>
        <dd>
            @Model.StructuredInformationResult.HealthTechnologySpecifications.DoesTechnologyRequireMaintenance.ToYesNo()
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DoesTechnologyRequireMaintenance)
            {
                <p>
                    Type: @Model.StructuredInformationResult.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceSpecifyType<br>
                    Frequency: @Model.StructuredInformationResult.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceSpecifyFrequency<br>
                    Can it be done on-site / home / community?: @Model.StructuredInformationResult.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceCanItBeDoneOnSiteOrHomeOrCommunity.ToYesNo()
                </p>
            }
        </dd>

        @if (Model.StructuredInformationResult.HealthTechnologySpecifications.DoesTechnologyRequireMaintenance)
        {
            <dt>If yes, who should provide maintenance?</dt>
            <dd>@Model.StructuredInformationResult.HealthTechnologySpecifications.IfTechnologyRequiresMaintenanceWhoShouldProvideMaintenance</dd>
        }

        <dt>Energy requirements</dt>
        <dd>
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.MechanicalEnergy)
            {
                <p>Mechanical energy (e.g. manually powered)</p>
            }
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.Batteries)
            {
                <p>Batteries</p>
            }
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.PowerSupplyForRecharging)
            {
                <p>
                    Power supply for recharging
                    Voltage required: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredVoltage V<br>
                    Time required to recharge: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredTimeToRechargeInHours hours @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredTimeToRechargeInMinutes minutes<br>
                    Battery life with full charge: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredBatteryLifeInHours hours @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfPowerSupplyForRechargingThenRequiredBatteryLifeInMinutes minutes
                </p>
            }
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.ContinuousPowerSupply)
            {
                <p>
                    Continuous power supply<br>
                    Voltage required: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfContinuousPowerSupplyThenRequiredVoltage V
                </p>
            }
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.SolarPower)
            {
                <p>
                    Solar power<br>
                    Time in sunlight required to charge: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenTimeInSunlightRequiredToChargeInHours hours @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenTimeInSunlightRequiredToChargeInMinutes minutes<br>
                    Battery life with full charge: @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenBatteryLifeInHours hours @Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.IfSolarPowerThenBatteryLifeInMinutes minutes
                </p>
            }
            @if (Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.Other)
            {
                <p>@Model.StructuredInformationResult.HealthTechnologySpecifications.EnergyRequirementsViewModel.OtherText</p>
            }
        </dd>

        <dt>Facility requirements</dt>
        <dd>
            @foreach (var item in Model.StructuredInformationResult.HealthTechnologySpecifications.FacilityRequirementsViewModel.GetResult())
            {
                <p>@item</p>
            }
        </dd>
    </dl>
}

<h1>Design prototyping</h1>
@Html.Raw(Model.PrototypesAndConsiderationsForSafetyAssessment)

<h1>Quality criteria and validation test</h1>
@Html.Raw(Model.QualityCriteria)

</body>
</html> 