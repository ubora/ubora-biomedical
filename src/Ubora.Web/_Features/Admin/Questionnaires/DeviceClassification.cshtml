@using System.Web
@using Newtonsoft.Json;
@using Ubora.Web._Features.Admin.Questionnaires;

@model Ubora.Domain.Questionnaires.DeviceClassifications.DeviceClassificationQuestionnaireTree

@{
    var nodes = Model.Questions
        .Select(q => new Node
        {
            Id = q.Id,
            Numbers = q.Id.Replace("q", "").Split('_').Select(nr => int.Parse(nr)).ToList(),
            Question = HttpUtility.JavaScriptStringEncode(q.Text),
            Answers = q.Answers.Select(a => HttpUtility.JavaScriptStringEncode(a.Text)).ToArray()
        });

    var nodes2 = new List<Node>();
    int previousMaxWidth = 0;
    int previousMaxHeight = 0;
    Node previous = nodes.First();
    bool didRowChange = false;
    @foreach (var n in nodes)
    {
        if (n.Numbers.Count() > previous.Numbers.Count())
        {
            didRowChange = true;
        } else
        {
            didRowChange = false;
        }

        n.Cell = GetX(n.Numbers, previousMaxWidth, didRowChange);
        n.Row = GetY(n.Numbers, previousMaxHeight);

        if (n.Cell > previousMaxWidth)
        {
            previousMaxWidth = n.Cell;
        }
        nodes2.Add(n);
        previous = n;
    }


    var nodesSerialized = JsonConvert.SerializeObject(nodes2.Select(n => new
    {
        data = new { id = n.Id, question = n.Question, answers = n.Answers },
        position = new { x = n.Cell, y = n.Row }
    }));

    var edges = Model.Questions.SelectMany(q => q.Answers.Where(z => z.NextQuestionId != null).Select(a => new Edge
    {
        ResourceName = a.Id,
        Source = q.Id,
        Target = a.NextQuestionId,
        Answer = HttpUtility.JavaScriptStringEncode(a.Text)
    })).ToList();

    //var edges2 = new List<Edge>();
    //foreach (var e in edges)
    //{
    //    if (!edges2.Any(x => x.Source == e.Source && x.Target == e.Target))
    //    {
    //        edges2.Add(e);
    //    }
    //}

    var edgesSerialized = JsonConvert.SerializeObject(edges.Select(e => new
    {
        data = new
        {
            id = Guid.NewGuid(),
            source = e.Source,
            target = e.Target,
            answer = e.Answer,
            resource = e.ResourceName
        }
    }));

    int GetX(IEnumerable<int> numbers, int max, bool didRowChange2)
    {
        var x = numbers.Max() * 100;

        if (didRowChange2)
        {
            if (x < max)
            {
                x = max;
            }
        }
        else
        {
            if (x <= max)
            {
                x = max + 100;
            }
        }

        return x;
    }

    int GetY(IEnumerable<int> numbers, int maxs)
    {
        var y = numbers.Count() * 100;

        return y;
    }
}


@section Head {
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/treant-js/1.0/Treant.css" type="text/css" />
    <link href="http://cdnjs.cloudflare.com/ajax/libs/qtip2/2.2.0/jquery.qtip.min.css" rel="stylesheet" type="text/css" />
    <style type="text/css">
        #cy {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0px;
            left: 0px;
        }


    </style>
}

<div id="cy"></div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.2.4/cytoscape.min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/qtip2/2.2.0/jquery.qtip.min.js"></script>
    <script src="https://cdn.rawgit.com/cytoscape/cytoscape.js-qtip/2.7.0/cytoscape-qtip.js"></script>
    <script src="https://cdn.rawgit.com/cpettitt/dagre/v0.7.4/dist/dagre.min.js"></script>
    <script src="https://cdn.rawgit.com/cytoscape/cytoscape.js-dagre/1.5.0/cytoscape-dagre.js"></script>

    <script>
        var nodesJson = '@Html.Raw(nodesSerialized)';
        var edgesJson = '@Html.Raw(edgesSerialized)';
        var asdf = JSON.parse(nodesJson).concat(JSON.parse(edgesJson));

        var cy = cytoscape({

            container: document.getElementById('cy'),
            elements: asdf,

            layout: {
                name: 'dagre'
            },

            //style: [
            //    {
            //        selector: 'node',
            //        style: {
            //            'content': 'data(id)'
            //        }
            //    },
            //    {
            //        selector: 'edge',
            //        style: {
            //            'curve-style': 'bezier',
            //            'target-arrow-shape': 'triangle'
            //        }
            //    }
            //],

            
            style: [
                {
                    selector: 'node',
                    style: {
                        'content': 'data(id)',
                        'text-opacity': 0.5,
                        'text-valign': 'center',
                        'text-halign': 'right',
                        'background-color': '#11479e'
                    }
                },

                {
                    selector: 'edge',
                    style: {
                        'content': 'data(resource)',
                        'curve-style': 'bezier',
                        'width': 4,
                        'mid-target-arrow-shape': 'triangle',
                        'line-color': '#9dbaea',
                        'mid-target-arrow-color': '#11479e',
                    }
                },
            ]
        });

        cy.$('node').forEach(function (node) {
            node.qtip({
                content: node.data('question'),
                position: {
                    my: 'top center',
                    at: 'bottom center'
                },
                style: {
                    classes: 'qtip-bootstrap',
                    tip: {
                        width: 16,
                        height: 8
                    }
                },
                show: {
                    event: 'click',
                    solo: true
                },
                hide: {
                    event: 'unfocus'
                }
            });
        });

        cy.$('edge').forEach(function (edge) {
            edge.qtip({
                content: edge.data('answer'),
                position: {
                    target: 'mouse',
                },
                style: {
                    classes: 'qtip-bootstrap',
                    tip: {
                        width: 16,
                        height: 8
                    }
                },
                show: {
                    event: 'click',
                    solo: true
                },
                hide: {
                    event: 'unfocus'
                }
            });
        });

    </script>
}